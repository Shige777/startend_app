import 'package:flutter/material.dart';
import 'package:emoji_picker_flutter/emoji_picker_flutter.dart';
import 'package:flutter_emoji/flutter_emoji.dart';
import '../constants/app_colors.dart';

class AdvancedReactionPicker extends StatefulWidget {
  final Function(String emoji) onReactionSelected;

  const AdvancedReactionPicker({
    super.key,
    required this.onReactionSelected,
  });

  @override
  State<AdvancedReactionPicker> createState() => _AdvancedReactionPickerState();
}

class _AdvancedReactionPickerState extends State<AdvancedReactionPicker> {
  final EmojiParser emojiParser = EmojiParser();
  
  // „Ç´„ÉÜ„Ç¥„É™Âà•„ÅÆ‰∫∫Ê∞óÁµµÊñáÂ≠ó
  static const Map<String, List<String>> categoryEmojis = {
    '‰∫∫Ê∞ó': [
      'üëç', '‚ù§Ô∏è', 'üòä', 'üòÇ', 'üî•', 'üíØ', 'üëè', 'üéâ',
      'üòç', 'ü§î', 'üëÄ', 'üí™', 'üöÄ', '‚ú®', 'üôè', '‚ö°',
    ],
    'ÊÑüÊÉÖ': [
      'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÇ', 'ü§£', 'üò≠',
      'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞',
      'üòò', 'üòó', 'üòô', 'üòö', 'üòã', 'üòõ', 'üòù', 'üòú',
      'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©', 'ü•≥', 'üòè',
    ],
    'ÂèçÂøú': [
      'üòÆ', 'üòØ', 'üò≤', 'üò≥', 'ü•∫', 'üò¢', 'üò∞', 'üò±',
      'ü§Ø', 'üò§', 'üò†', 'üò°', 'ü§¨', 'üòà', 'üëø', 'üíÄ',
      '‚ò†Ô∏è', 'üí©', 'ü§°', 'üëπ', 'üë∫', 'üëª', 'üëΩ', 'ü§ñ',
    ],
    '„Ç∏„Çß„Çπ„ÉÅ„É£„Éº': [
      'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã', 'üññ', 'üëå', 'ü§è', '‚úåÔ∏è',
      'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï',
      'üëá', '‚òùÔ∏è', 'üëç', 'üëé', 'üëä', '‚úä', 'ü§õ', 'ü§ú',
      'üëè', 'üôå', 'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üí™',
    ],
    '„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà': [
      'üéØ', 'üèÜ', 'üèÖ', 'ü•á', 'ü•à', 'ü•â', 'üèµÔ∏è', 'üéñÔ∏è',
      'üíé', 'üíç', 'üëë', 'üî•', 'üí°', '‚≠ê', 'üåü', '‚ú®',
      'üí´', '‚ö°', 'üåà', '‚òÄÔ∏è', 'üåô', '‚≠ê', 'üåç', 'üöÄ',
      'üéà', 'üéâ', 'üéä', 'üéÅ', 'üèÅ', 'üö©', 'üíù', 'üíñ',
    ],
    '„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£': [
      '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ',
      'ü•Ö', 'üè∏', 'üèì', 'üèí', 'üèë', 'ü•ç', 'üèè', 'ü™É',
      'ü•ä', 'ü•ã', 'üé™', 'üé≠', 'üé®', 'üé¨', 'üé§', 'üéß',
      'üéº', 'üéµ', 'üé∂', 'üéØ', 'üé≤', 'üéÆ', 'üïπÔ∏è', 'üé∞',
    ],
  };

  String selectedCategory = '‰∫∫Ê∞ó';

  @override
  Widget build(BuildContext context) {
    return Container(
      height: MediaQuery.of(context).size.height * 0.5,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, -5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // „Éò„ÉÉ„ÉÄ„Éº
          Row(
            children: [
              Text(
                '„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÈÅ∏Êäû',
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
              ),
              const Spacer(),
              IconButton(
                icon: const Icon(Icons.close),
                onPressed: () => Navigator.of(context).pop(),
                iconSize: 24,
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          // „Ç´„ÉÜ„Ç¥„É™„Çø„Éñ
          SizedBox(
            height: 40,
            child: ListView(
              scrollDirection: Axis.horizontal,
              children: categoryEmojis.keys.map((category) {
                final isSelected = category == selectedCategory;
                return Padding(
                  padding: const EdgeInsets.only(right: 8),
                  child: GestureDetector(
                    onTap: () {
                      setState(() {
                        selectedCategory = category;
                      });
                    },
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 8,
                      ),
                      decoration: BoxDecoration(
                        color: isSelected
                            ? AppColors.primary
                            : AppColors.surface,
                        borderRadius: BorderRadius.circular(20),
                        border: Border.all(
                          color: isSelected
                              ? AppColors.primary
                              : AppColors.textHint.withOpacity(0.3),
                        ),
                      ),
                      child: Text(
                        category,
                        style: TextStyle(
                          color: isSelected
                              ? Colors.white
                              : AppColors.textPrimary,
                          fontWeight: isSelected
                              ? FontWeight.bold
                              : FontWeight.normal,
                          fontSize: 14,
                        ),
                      ),
                    ),
                  ),
                );
              }).toList(),
            ),
          ),
          
          const SizedBox(height: 16),
          
          // ÁµµÊñáÂ≠ó„Ç∞„É™„ÉÉ„Éâ
          Expanded(
            child: GridView.builder(
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 8,
                childAspectRatio: 1,
                crossAxisSpacing: 8,
                mainAxisSpacing: 8,
              ),
              itemCount: categoryEmojis[selectedCategory]?.length ?? 0,
              itemBuilder: (context, index) {
                final emoji = categoryEmojis[selectedCategory]![index];
                return _buildEmojiButton(emoji);
              },
            ),
          ),
          
          const SizedBox(height: 16),
          
          // „Éï„É´ÁµµÊñáÂ≠ó„Éî„ÉÉ„Ç´„Éº„Éú„Çø„É≥
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: () => _showFullEmojiPicker(context),
              icon: const Icon(Icons.emoji_emotions),
              label: const Text('„Åô„Åπ„Å¶„ÅÆÁµµÊñáÂ≠ó„ÇíË¶ã„Çã'),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.surface,
                foregroundColor: AppColors.textPrimary,
                padding: const EdgeInsets.symmetric(vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                  side: BorderSide(
                    color: AppColors.textHint.withOpacity(0.3),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmojiButton(String emoji) {
    return GestureDetector(
      onTap: () {
        widget.onReactionSelected(emoji);
        Navigator.of(context).pop();
      },
      child: Container(
        decoration: BoxDecoration(
          color: AppColors.surface,
          borderRadius: BorderRadius.circular(8),
          border: Border.all(
            color: AppColors.textHint.withOpacity(0.2),
          ),
        ),
        child: Center(
          child: Text(
            emoji,
            style: const TextStyle(
              fontSize: 28,
            ),
          ),
        ),
      ),
    );
  }

  void _showFullEmojiPicker(BuildContext context) {
    Navigator.of(context).pop(); // ÁèæÂú®„ÅÆ„Éî„ÉÉ„Ç´„Éº„ÇíÈñâ„Åò„Çã
    
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.6,
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: Column(
          children: [
            // „Éò„ÉÉ„ÉÄ„Éº
            Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                children: [
                  Text(
                    '„Åô„Åπ„Å¶„ÅÆÁµµÊñáÂ≠ó',
                    style: Theme.of(context).textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                  const Spacer(),
                  IconButton(
                    icon: const Icon(Icons.close),
                    onPressed: () => Navigator.of(context).pop(),
                  ),
                ],
              ),
            ),
            
            // „Éï„É´ÁµµÊñáÂ≠ó„Éî„ÉÉ„Ç´„Éº
            Expanded(
              child: EmojiPicker(
                onEmojiSelected: (category, emoji) {
                  widget.onReactionSelected(emoji.emoji);
                  Navigator.of(context).pop();
                },
                config: Config(
                  height: 256,
                  checkPlatformCompatibility: true,
                  emojiViewConfig: EmojiViewConfig(
                    backgroundColor: Colors.white,
                    columns: 7,
                    emojiSizeMax: 32,
                    verticalSpacing: 0,
                    horizontalSpacing: 0,
                    gridPadding: EdgeInsets.zero,
                    initCategory: Category.RECENT,
                    bgColor: const Color(0xFFF2F2F2),
                    indicatorColor: AppColors.primary,
                    iconColor: Colors.grey,
                    iconColorSelected: AppColors.primary,
                    backspaceColor: AppColors.primary,
                    skinToneDialogBgColor: Colors.white,
                    skinToneIndicatorColor: Colors.grey,
                    enableSkinTones: true,
                    showRecentsTab: true,
                    recentsLimit: 28,
                    replaceEmojiOnLimitExceed: false,
                    noRecents: const Text(
                      'ÊúÄËøë‰Ωø„Å£„ÅüÁµµÊñáÂ≠ó„Å™„Åó',
                      style: TextStyle(fontSize: 20, color: Colors.black26),
                      textAlign: TextAlign.center,
                    ),
                    loadingIndicator: const SizedBox.shrink(),
                    tabIndicatorAnimDuration: kTabScrollDuration,
                    categoryIcons: const CategoryIcons(),
                    buttonMode: ButtonMode.MATERIAL,
                    checkPlatformCompatibility: true,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// È´òÊ©üËÉΩ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„Éî„ÉÉ„Ç´„Éº„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
void showAdvancedReactionPicker(BuildContext context, Function(String emoji) onReactionSelected) {
  showModalBottomSheet(
    context: context,
    isScrollControlled: true,
    backgroundColor: Colors.transparent,
    builder: (context) => AdvancedReactionPicker(
      onReactionSelected: onReactionSelected,
    ),
  );
}
