rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // 読み取り権限：認証済みユーザー
      allow read: if request.auth != null;
      
      // 自分のプロフィール作成・更新
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        validateUserData(request.resource.data);
      
      allow update: if request.auth != null && 
        request.auth.uid == userId &&
        validateUserUpdate(resource.data, request.resource.data);
      
      // フォロー・アンフォロー用：認証済みユーザーが他のユーザーのfollowerIdsを更新可能
      allow update: if request.auth != null && 
        isFollowUnfollowUpdate(resource.data, request.resource.data);
    }
    
    // Posts collection
    match /posts/{postId} {
      // 投稿の読み取り：認証済みユーザーのみ（プライバシーレベル考慮）
      allow read: if request.auth != null && canReadPost(resource.data);
      
      // 投稿の作成：自分のuserIdの投稿のみ作成可能
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        validatePostData(request.resource.data);
      
      // 投稿の更新：投稿者本人のみ可能（END投稿も含む）
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        validatePostUpdate(resource.data, request.resource.data);
      
      // 投稿の削除：投稿者本人のみ可能
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Communities collection
    match /communities/{communityId} {
      // コミュニティの読み取り：認証済みユーザーのみ
      allow read: if request.auth != null;
      
      // コミュニティの作成：認証済みユーザーのみ
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.leaderId &&
        validateCommunityData(request.resource.data);
      
      // コミュニティの更新：リーダーまたはメンバーのみ
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.leaderId ||
        request.auth.uid in resource.data.memberIds
      ) && validateCommunityUpdate(resource.data, request.resource.data);
      
      // コミュニティの削除：リーダーのみ
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.leaderId;
    }
    
    // Community applications collection
    match /community_applications/{applicationId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.get('userId', '') ||
        request.auth.uid == resource.data.get('leaderId', '')
      );
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // 通知の読み取り：本人のみ
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // 通知の作成：認証済みユーザーのみ（システムまたは他ユーザーから）
      allow create: if request.auth != null;
      
      // 通知の更新：本人のみ（既読状態の更新）
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        onlyUpdatingReadStatus(resource.data, request.resource.data);
        
      // 通知の削除：本人のみ
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Follow requests collection
    match /follow_requests/{requestId} {
      // フォローリクエストの読み取り：リクエスター本人またはターゲットユーザー
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.get('requesterId', '') ||
        request.auth.uid == resource.data.get('targetUserId', '')
      );
      
      // フォローリクエストの作成：リクエスター本人のみ
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.requesterId;
      
      // フォローリクエストの更新：ターゲットユーザーのみ（承認・拒否）
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.get('targetUserId', '');
      
      // フォローリクエストの削除：リクエスター本人またはターゲットユーザー
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.get('requesterId', '') ||
        request.auth.uid == resource.data.get('targetUserId', '')
      );
    }
    
    // Scheduled notifications collection
    match /scheduled_notifications/{notificationId} {
      // スケジュール通知の作成：認証済みユーザーのみ
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      // スケジュール通知の読み取り：本人のみ
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // スケジュール通知の更新：本人のみ
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // スケジュール通知の削除：本人のみ
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Helper functions
    function validateUserData(data) {
      return data.keys().hasAll(['displayName', 'email', 'createdAt', 'updatedAt']) &&
        data.displayName is string &&
        data.displayName.size() > 0 &&
        data.displayName.size() <= 50 &&
        data.email is string &&
        data.email.matches('.*@.*\\..*');
    }
    
    function validateUserUpdate(oldData, newData) {
      // 基本的な安全性チェック
      let hasUpdatedAt = newData.keys().hasAny(['updatedAt']);
      
      // メールアドレスが存在する場合は変更不可
      let emailValid = !('email' in newData) || 
        !('email' in oldData) || 
        newData.email == oldData.email;
      
      // オプションフィールドの検証
      let hasValidOptionalFields = (
        // displayName: 文字列で50文字以下（存在する場合）
        (!('displayName' in newData) || (newData.displayName is string && newData.displayName.size() > 0 && newData.displayName.size() <= 50)) &&
        // followingIds: 配列（存在する場合）
        (!('followingIds' in newData) || newData.followingIds is list) &&
        // followerIds: 配列（存在する場合）
        (!('followerIds' in newData) || newData.followerIds is list) &&
        // postCount: 数値（存在する場合）
        (!('postCount' in newData) || (newData.postCount is number && newData.postCount >= 0)) &&
        // その他のフィールドは制限なし
        true
      );
      
      return hasUpdatedAt && emailValid && hasValidOptionalFields;
    }
    
    function validatePostData(data) {
      let requiredFields = ['userId', 'title', 'type', 'privacyLevel', 'communityIds', 'likedByUserIds', 'likeCount', 'createdAt', 'updatedAt'];
      
      return data.keys().hasAll(requiredFields) &&
        data.title is string &&
        data.title.size() <= 100 &&
        data.type in ['start', 'end'] &&
        data.privacyLevel in ['public', 'mutualFollowersOnly', 'communityOnly', 'mutualFollowersAndCommunity'] &&
        data.communityIds is list &&
        data.communityIds.size() <= 10 && // 最大10コミュニティ
        data.likedByUserIds is list &&
        data.likeCount is number &&
        data.likeCount >= 0 &&
        // オプションフィールドの検証
        validateOptionalFields(data);
    }
    
    function validateOptionalFields(data) {
      return (
        // comment: null または文字列
        (!('comment' in data) || data.comment == null || (data.comment is string && data.comment.size() <= 500)) &&
        // endComment: null または文字列  
        (!('endComment' in data) || data.endComment == null || (data.endComment is string && data.endComment.size() <= 500)) &&
        // imageUrl: null または文字列
        (!('imageUrl' in data) || data.imageUrl == null || (data.imageUrl is string && data.imageUrl.size() <= 2048)) &&
        // endImageUrl: null または文字列
        (!('endImageUrl' in data) || data.endImageUrl == null || (data.endImageUrl is string && data.endImageUrl.size() <= 2048)) &&
        // scheduledEndTime: null またはタイムスタンプ
        (!('scheduledEndTime' in data) || data.scheduledEndTime == null || data.scheduledEndTime is timestamp) &&
        // actualEndTime: null またはタイムスタンプ
        (!('actualEndTime' in data) || data.actualEndTime == null || data.actualEndTime is timestamp) &&
        // startPostId: null または文字列
        (!('startPostId' in data) || data.startPostId == null || (data.startPostId is string && data.startPostId.size() <= 255)) &&
        // endPostId: null または文字列
        (!('endPostId' in data) || data.endPostId == null || (data.endPostId is string && data.endPostId.size() <= 255))
      );
    }
    
    function validatePostUpdate(oldData, newData) {
      // 基本フィールドは変更不可（userIdとtypeは変更禁止）
      return newData.userId == oldData.userId &&
        newData.type == oldData.type &&
        // 必須フィールドの存在確認
        newData.keys().hasAll(['userId', 'type', 'updatedAt']) &&
        // オプションフィールドの検証
        validateOptionalFields(newData);
    }
    
    function validateCommunityData(data) {
      return data.keys().hasAll(['name', 'leaderId', 'memberIds', 'createdAt', 'updatedAt']) &&
        data.name is string &&
        data.name.size() > 0 &&
        data.name.size() <= 50 &&
        data.get('description', '').size() <= 200 &&
        data.memberIds is list &&
        data.memberIds.size() > 0 &&
        data.memberIds.size() <= 8 &&
        data.leaderId in data.memberIds;
    }
    
    function validateCommunityUpdate(oldData, newData) {
      return newData.leaderId == oldData.leaderId &&
        newData.memberIds is list &&
        newData.memberIds.size() > 0 &&
        newData.memberIds.size() <= 8 &&
        newData.leaderId in newData.memberIds;
    }
    
    function canReadPost(postData) {
      // 投稿者本人は常に読み取り可能
      return request.auth.uid == postData.userId ||
        // パブリック投稿は誰でも読み取り可能
        postData.get('privacyLevel', 'public') == 'public' ||
        // コミュニティ限定投稿の場合（簡略化実装）
        (postData.get('privacyLevel', 'public') == 'communityOnly' && 
         postData.get('communityIds', []).size() > 0) ||
        // フォロワー限定投稿の場合（簡略化実装）
        (postData.get('privacyLevel', 'public') == 'mutualFollowersOnly') ||
        // フォロワー＋コミュニティ投稿の場合（簡略化実装）
        (postData.get('privacyLevel', 'public') == 'mutualFollowersAndCommunity');
    }
    

    
    function onlyUpdatingReadStatus(oldData, newData) {
      let allowedKeys = ['read', 'readAt', 'updatedAt'];
      let affectedKeys = newData.diff(oldData).affectedKeys();
      
      // 変更されたキーが許可されたキーのサブセットであることを確認
      return affectedKeys.hasAll([]) && // 最低限の条件
             affectedKeys.hasOnly(allowedKeys);
    }
    
    function isFollowUnfollowUpdate(oldData, newData) {
      // フォロー・アンフォロー操作の場合のみ許可
      let allowedKeys = ['followingIds', 'followerIds', 'updatedAt'];
      let affectedKeys = newData.diff(oldData).affectedKeys();
      
      // 変更されたキーがフォロー関連のキーのみであることを確認
      return affectedKeys.hasOnly(allowedKeys) &&
             // updatedAtは必須
             'updatedAt' in newData.keys() &&
             // 基本的なデータ型チェック
             (!('followingIds' in newData) || newData.followingIds is list) &&
             (!('followerIds' in newData) || newData.followerIds is list);
    }
  }
}