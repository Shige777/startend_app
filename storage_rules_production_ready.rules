rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Profile images - 現在の構造に合わせつつセキュリティ強化
    match /profiles/{fileName} {
      // プロフィール画像の読み取り：認証済みユーザーのみ
      allow read: if request.auth != null;
      
      // プロフィール画像のアップロード：認証済みユーザーのみ、厳格な制限
      allow write: if request.auth != null && 
        isValidImageFile() &&
        isValidFileSize(10 * 1024 * 1024) && // 10MB制限
        isOwnerOrValidFileName(fileName);
      
      // プロフィール画像の削除：ファイル名にユーザーIDが含まれる場合のみ
      allow delete: if request.auth != null && 
        isOwnerOrValidFileName(fileName);
    }
    
    // Post images - 現在の構造に合わせつつセキュリティ強化
    match /posts/{fileName} {
      // 投稿画像の読み取り：認証済みユーザーのみ
      allow read: if request.auth != null;
      
      // 投稿画像のアップロード：認証済みユーザーのみ、厳格な制限
      allow write: if request.auth != null && 
        isValidImageFile() &&
        isValidFileSize(10 * 1024 * 1024) && // 10MB制限
        isOwnerOrValidFileName(fileName);
      
      // 投稿画像の削除：ファイル名にユーザーIDが含まれる場合のみ
      allow delete: if request.auth != null && 
        isOwnerOrValidFileName(fileName);
    }
    
    // Community images - 現在の構造に合わせつつセキュリティ強化
    match /communities/{fileName} {
      // コミュニティ画像の読み取り：認証済みユーザーのみ
      allow read: if request.auth != null;
      
      // コミュニティ画像のアップロード：認証済みユーザーのみ、制限あり
      allow write: if request.auth != null && 
        isValidImageFile() &&
        isValidFileSize(5 * 1024 * 1024) && // 5MB制限
        isValidFileName(fileName);
      
      // コミュニティ画像の削除：認証済みユーザーのみ
      allow delete: if request.auth != null;
    }
    
    // Helper functions
    function isValidImageFile() {
      // 画像ファイルの形式を厳密にチェック
      return request.resource != null &&
        request.resource.contentType != null &&
        request.resource.contentType.matches('image/.*') &&
        request.resource.contentType in [
          'image/jpeg', 
          'image/png', 
          'image/webp', 
          'image/gif'
        ];
    }
    
    function isValidFileSize(maxSize) {
      // ファイルサイズをチェック
      return request.resource != null &&
        request.resource.size <= maxSize &&
        request.resource.size > 0; // 空ファイルを防ぐ
    }
    
    function isValidFileName(fileName) {
      // ファイル名の基本的な安全性をチェック
      return fileName.size() > 0 &&
        fileName.size() <= 255 &&
        !fileName.matches('.*[<>:"/\\\\|?*].*'); // 危険な文字を禁止
    }
    
    function isOwnerOrValidFileName(fileName) {
      // ファイル名にユーザーIDが含まれているかチェック
      // 現在のファイル名形式: {timestamp}_{userId}.jpg
      return isValidFileName(fileName) && (
        fileName.matches('.*_' + request.auth.uid.split('').slice(0, 10).join('') + '\\.jpg') ||
        fileName.matches('.*_' + request.auth.uid + '\\.jpg')
      );
    }
  }
}
