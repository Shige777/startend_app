rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // 自分のプロフィールは読み書き可能
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // 他のユーザーのプロフィールは読み取りのみ（プライベートアカウントは除く）
      allow read: if request.auth != null && (
        !resource.data.get('isPrivate', false) ||
        request.auth.uid in resource.data.get('followerIds', [])
      );
      
      // 新規ユーザー作成時のバリデーション
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        validateUserData(request.resource.data);
      
      // ユーザー更新時のバリデーション
      allow update: if request.auth != null && 
        request.auth.uid == userId &&
        validateUserUpdate(resource.data, request.resource.data);
    }
    
    // Posts collection
    match /posts/{postId} {
      // 投稿の読み取り：認証済みユーザーのみ（プライバシーレベル考慮）
      allow read: if request.auth != null && canReadPost(resource.data);
      
      // 投稿の作成：自分のuserIdの投稿のみ作成可能
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId &&
        validatePostData(request.resource.data);
      
      // 投稿の更新：投稿者本人のみ可能（END投稿も含む）
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        validatePostUpdate(resource.data, request.resource.data);
      
      // 投稿の削除：投稿者本人のみ可能
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Communities collection
    match /communities/{communityId} {
      // コミュニティの読み取り：認証済みユーザーのみ
      allow read: if request.auth != null;
      
      // コミュニティの作成：認証済みユーザーのみ
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.leaderId &&
        validateCommunityData(request.resource.data);
      
      // コミュニティの更新：リーダーまたはメンバーのみ
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.leaderId ||
        request.auth.uid in resource.data.memberIds
      ) && validateCommunityUpdate(resource.data, request.resource.data);
      
      // コミュニティの削除：リーダーのみ
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.leaderId;
    }
    
    // Community applications collection
    match /community_applications/{applicationId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.get('userId', '') ||
        request.auth.uid == resource.data.get('leaderId', '')
      );
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // 通知の読み取り：本人のみ
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // 通知の作成：認証済みユーザーのみ（システムまたは他ユーザーから）
      allow create: if request.auth != null;
      
      // 通知の更新：本人のみ（既読状態の更新）
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        onlyUpdatingReadStatus(resource.data, request.resource.data);
        
      // 通知の削除：本人のみ
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Follow requests collection
    match /follow_requests/{requestId} {
      allow read, write: if request.auth != null && (
        request.auth.uid == resource.data.get('requesterId', '') ||
        request.auth.uid == resource.data.get('targetUserId', '')
      );
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.requesterId;
    }
    
    // Scheduled notifications collection
    match /scheduled_notifications/{notificationId} {
      // スケジュール通知の作成：認証済みユーザーのみ
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      // スケジュール通知の読み取り：本人のみ
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // スケジュール通知の更新：本人のみ
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // スケジュール通知の削除：本人のみ
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Helper functions
    function validateUserData(data) {
      return data.keys().hasAll(['displayName', 'email', 'createdAt', 'updatedAt']) &&
        data.displayName is string &&
        data.displayName.size() > 0 &&
        data.displayName.size() <= 50 &&
        data.email is string &&
        data.email.matches('.*@.*\\..*');
    }
    
    function validateUserUpdate(oldData, newData) {
      return newData.keys().hasAll(['displayName', 'email', 'updatedAt']) &&
        newData.displayName is string &&
        newData.displayName.size() > 0 &&
        newData.displayName.size() <= 50 &&
        newData.email == oldData.email; // メールアドレスは変更不可
    }
    
    function validatePostData(data) {
      let requiredFields = ['userId', 'title', 'type', 'privacyLevel', 'communityIds', 'likedByUserIds', 'likeCount', 'createdAt', 'updatedAt'];
      
      return data.keys().hasAll(requiredFields) &&
        data.title is string &&
        data.title.size() > 0 &&
        data.title.size() <= 100 &&
        data.type in ['start', 'end'] &&
        data.privacyLevel in ['public', 'mutualFollowersOnly', 'communityOnly', 'mutualFollowersAndCommunity'] &&
        data.communityIds is list &&
        data.communityIds.size() <= 10 && // 最大10コミュニティ
        data.likedByUserIds is list &&
        data.likeCount is number &&
        data.likeCount >= 0 &&
        // オプションフィールドの検証
        validateOptionalFields(data);
    }
    
    function validateOptionalFields(data) {
      return (
        // comment: null または文字列
        (!data.keys().hasAny(['comment']) || data.comment == null || data.comment is string) &&
        // endComment: null または文字列  
        (!data.keys().hasAny(['endComment']) || data.endComment == null || data.endComment is string) &&
        // imageUrl: null または文字列
        (!data.keys().hasAny(['imageUrl']) || data.imageUrl == null || data.imageUrl is string) &&
        // endImageUrl: null または文字列
        (!data.keys().hasAny(['endImageUrl']) || data.endImageUrl == null || data.endImageUrl is string) &&
        // scheduledEndTime: null またはタイムスタンプ
        (!data.keys().hasAny(['scheduledEndTime']) || data.scheduledEndTime == null || data.scheduledEndTime is timestamp) &&
        // actualEndTime: null またはタイムスタンプ
        (!data.keys().hasAny(['actualEndTime']) || data.actualEndTime == null || data.actualEndTime is timestamp) &&
        // startPostId: null または文字列
        (!data.keys().hasAny(['startPostId']) || data.startPostId == null || data.startPostId is string) &&
        // endPostId: null または文字列
        (!data.keys().hasAny(['endPostId']) || data.endPostId == null || data.endPostId is string)
      );
    }
    
    function validatePostUpdate(oldData, newData) {
      // 基本フィールドは変更不可
      return newData.userId == oldData.userId &&
        newData.type == oldData.type &&
        // END投稿への更新を許可
        (newData.title == oldData.title || 
         (oldData.type == 'start' && newData.type == 'end')) &&
        // 必須フィールドの存在確認
        newData.keys().hasAll(['userId', 'type', 'updatedAt']);
    }
    
    function validateCommunityData(data) {
      return data.keys().hasAll(['name', 'leaderId', 'memberIds', 'createdAt', 'updatedAt']) &&
        data.name is string &&
        data.name.size() > 0 &&
        data.name.size() <= 50 &&
        data.get('description', '').size() <= 200 &&
        data.memberIds is list &&
        data.memberIds.size() > 0 &&
        data.memberIds.size() <= 8 &&
        data.leaderId in data.memberIds;
    }
    
    function validateCommunityUpdate(oldData, newData) {
      return newData.leaderId == oldData.leaderId &&
        newData.memberIds is list &&
        newData.memberIds.size() > 0 &&
        newData.memberIds.size() <= 8 &&
        newData.leaderId in newData.memberIds;
    }
    
    function canReadPost(postData) {
      let privacyLevel = postData.get('privacyLevel', 'public');
      
      // 投稿者本人は常に読み取り可能
      if (request.auth.uid == postData.userId) {
        return true;
      }
      
      // パブリック投稿は誰でも読み取り可能
      if (privacyLevel == 'public') {
        return true;
      }
      
      // コミュニティ限定投稿の場合
      if (privacyLevel == 'communityOnly') {
        return userIsMemberOfAnyCommunity(postData.get('communityIds', []));
      }
      
      // フォロワー限定投稿の場合
      if (privacyLevel == 'mutualFollowersOnly') {
        return userIsFollower(postData.userId);
      }
      
      // フォロワー＋コミュニティ投稿の場合
      if (privacyLevel == 'mutualFollowersAndCommunity') {
        return userIsFollower(postData.userId) || 
               userIsMemberOfAnyCommunity(postData.get('communityIds', []));
      }
      
      return false;
    }
    
    function userIsMemberOfAnyCommunity(communityIds) {
      // コミュニティメンバーシップの確認
      // 注意: これは簡略化された実装です
      // 実際にはコミュニティドキュメントを参照する必要があります
      return communityIds.size() > 0;
    }
    
    function userIsFollower(targetUserId) {
      // フォロワー関係の確認
      // 注意: これは簡略化された実装です
      // 実際にはユーザードキュメントのfollowerIdsを参照する必要があります
      return true; // 暫定的にtrue（実装要検討）
    }
    
    function onlyUpdatingReadStatus(oldData, newData) {
      return newData.diff(oldData).affectedKeys().hasOnly(['read', 'updatedAt']) ||
             newData.diff(oldData).affectedKeys().hasOnly(['read']) ||
             newData.diff(oldData).affectedKeys().hasOnly(['updatedAt']);
    }
  }
}
